
/* eslint quotes: 0 */
// Defines the MongoDB $jsonSchema for service `users`. (Can be re-generated.)
const merge = require('lodash.merge')
// !code: imports // !end
// !code: init // !end

let moduleExports = merge({},
  // !<DEFAULT> code: model
  {
    bsonType: "object",
    additionalProperties: false,
    properties: {
      _id: {
        bsonType: "objectId"
      },
      app_metadata: {
        bsonType: "object",
        additionalProperties: false,
        properties: {
          _id: {
            bsonType: "objectId"
          },
          roles: {
            description: "User roles for this user, e.g. `member`, `admin`, etc.",
            minItems: 1,
            items: {
              type: "string"
            },
            bsonType: "array"
          },
          google_refresh_token: {
            title: "Google API Refresh Token",
            description: "Token used to retrieve a new, valid access_token from the Google API",
            bsonType: "string"
          }
        }
      },
      blocked: {
        title: "Blocked Status",
        description: "Has the user been blocked?",
        default: false,
        bsonType: "boolean"
      },
      blocked_for: {
        title: "Blocked IP Addresses",
        description: "An array of identifier/IP address combos that are blocked for this user",
        minItems: 0,
        items: {
          type: "object",
          properties: {
            identifier: {
              type: "string",
              description: "Can be the user's email address, username, user_id, or phone number"
            },
            ip_address: {
              type: "string",
              description: "The blocked IP address",
              format: "ipv4"
            }
          },
          required: [
            "identifier",
            "ip_address"
          ],
          additionalProperties: false
        },
        bsonType: "array"
      },
      created_at: {
        title: "Auth0 Creation Time",
        description: "ISO 8601 datetime when user was created",
        format: "date-time",
        bsonType: "string"
      },
      email: {
        title: "Email Address",
        description: "Unique email associated with Auth0 identity",
        format: "email",
        bsonType: "string"
      },
      email_verified: {
        title: "Email Verification Status",
        description: "Has the email been verified by the user?",
        default: "false",
        bsonType: "boolean"
      },
      family_name: {
        title: "Last Name",
        description: "OIDC-compliant field for last name",
        bsonType: "string"
      },
      gender: {
        title: "Gender",
        description: "Theoretically the user's gender. Set by some social providers, e.g. Google.",
        bsonType: "string"
      },
      given_name: {
        title: "First Name",
        description: "OIDC-compliant field for first name",
        bsonType: "string"
      },
      identities: {
        title: "Auth0 Identities",
        description: "List of identity connection metadata objects",
        minItems: 1,
        uniqueItems: true,
        items: {
          type: "object",
          description: "Contains a provider, user_id, connection type, and whether or not it is a \"social\" provider",
          properties: {
            user_id: {
              title: "User ID",
              type: "string",
              description: "A unique identifier generated by the provider"
            },
            provider: {
              title: "Identity Provider (idP)",
              type: "string",
              description: "The entity that provided the associated user_id, e.g. auth0, google, facebook, etc."
            },
            connection: {
              title: "Connection Type",
              type: "string",
              description: "How authentication occurs, e.g. OAuth2, username/password, etc."
            },
            isSocial: {
              type: "boolean",
              description: "Was this user_id issued by a \"social\" provider, e.g. Google, Facebook, Twitter, GitHub, etc.",
              default: false
            },
            access_token: {
              title: "API Access Token",
              type: "string",
              description: "The API access_token associated with the identity provider"
            },
            expires_in: {
              title: "Token Expiration",
              type: "integer",
              description: "The number of seconds after which the access_token will expire (for Google, at least)",
              minimum: 0
            }
          },
          required: [
            "user_id",
            "provider",
            "connection",
            "isSocial"
          ],
          additionalProperties: true
        },
        bsonType: "array"
      },
      guardian_authenticators: {
        title: "MFA Services",
        description: "Guardians are services associated with MFA, e.g. duo, email, sms",
        minItems: 0,
        items: {
          type: "object",
          description: "A guardian factor (authenticator)",
          properties: {
            name: {
              title: "Guardian Name",
              description: "From the enum: duo, email, otp, push_notifications, sms",
              type: "string"
            },
            enabled: {
              title: "Guardian Enabled Status",
              description: "Is this guardian enabled?",
              type: "boolean",
              default: false
            },
            is_trial_expired: {
              title: "Guardian Trial Expired",
              description: "Is the trial period expired? (not sure what this means)",
              type: "boolean",
              default: false
            }
          },
          required: [
            "name",
            "enabled",
            "is_trial_expired"
          ],
          additionalProperties: false
        },
        bsonType: "array"
      },
      last_ip: {
        title: "Last Login IP",
        description: "The IP address from which the user last logged in",
        format: "ipv4",
        bsonType: "string"
      },
      last_login: {
        title: "Time of Last Login",
        description: "The ISO8601 datetime when the user last logged in",
        format: "date-time",
        bsonType: "string"
      },
      last_password_reset: {
        title: "Time of Last Password Reset",
        description: "The ISO8601 datetime when the user last reset their password",
        format: "date-time",
        bsonType: "string"
      },
      locale: {
        title: "i18n Locale",
        description: "ISO 639-1 code associated with user's preferred locale, e.g.",
        bsonType: "string"
      },
      logins_count: {
        title: "Login Count",
        description: "The number of times the user has logged in",
        minimum: 0,
        default: 0,
        bsonType: "number"
      },
      multifactor: {
        title: "MFA Providers",
        description: "The list of multi-factor providers in which the user is enrolled",
        minItems: 0,
        items: {
          type: "string"
        },
        bsonType: "array"
      },
      name: {
        title: "Name",
        description: "The full, formal name of the person",
        bsonType: "string"
      },
      nickname: {
        title: "Nickname",
        description: "The name by which this person prefers to be called",
        bsonType: "string"
      },
      password_set_date: {
        title: "Password Set Date",
        description: "The ISO8601 datetime when the user set their password; may be identical to `last_password_reset`",
        format: "date-time",
        bsonType: "string"
      },
      phone_number: {
        title: "Phone Number",
        description: "This user's phone number, typically only available if SMS is used for MFA",
        bsonType: "string"
      },
      phone_verified: {
        title: "Phone Verified Status",
        description: "Has the user verified that their `phone_number` is valid?",
        default: false,
        bsonType: "boolean"
      },
      picture: {
        title: "Picture",
        description: "A URL that points to a profile picture or avatar. Defaults to gravatar.",
        format: "uri",
        bsonType: "string"
      },
      updated_at: {
        title: "Updated",
        description: "The ISO8601 datetime when the user was updated",
        format: "date-time",
        bsonType: "string"
      },
      user_id: {
        title: "Auth0 UserID",
        description: "The user_id from Auth0 for this member.",
        bsonType: "string"
      },
      user_metadata: {
        bsonType: "object",
        additionalProperties: false,
        properties: {
          _id: {
            bsonType: "objectId"
          }
        }
      },
      username: {
        title: "Username",
        description: "The user's unique username (not typically set)",
        bsonType: "string"
      }
    },
    required: [
      "user_id"
    ]
  },
  // !end
  // !code: moduleExports // !end
)

// !code: exports // !end
module.exports = moduleExports

// !code: funcs // !end
// !code: end // !end
